// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator prisma-nestjs-graphql {
  provider = "prisma-nestjs-graphql"
  output   = "../src/@generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkspaceRoles {
  OWNER
  EDITOR
  VIEWER
}

enum AccountTypes {
  CASH
  CARD
  OTHER
}

enum IconTypes {
  FINANCIAL
  LEISURE
  EDUCATION
  HEALTH
  TRANSPORT_AND_TRAVEL
  PETS_AND_KIDS
  FOOD
  DIGITAL
  HOME
  BILLS
  OTHER
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  firstName String?
  lastName  String?
  picture   String?
  roles     Role[]
}

model Workspace {
  id         Int        @id @default(autoincrement())
  name       String
  createdOn  DateTime   @default(now())
  roles      Role[]
  accounts   Account[]
  categories Category[]
}

model Role {
  id          Int            @id @default(autoincrement())
  type        WorkspaceRoles
  userId      Int
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId Int
  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Currency {
  num  Int    @unique
  code String @unique
  name String
}

model Account {
  id           Int          @id @default(autoincrement())
  balance      Int
  currencyCode Int
  type         AccountTypes
  workspaceId  Int
  workspace    Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Icon {
  id         Int        @id @default(autoincrement())
  source     String
  color      String
  type       IconTypes
  categories Category[]
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  workspaceId Int
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  iconId      Int
  icon        Icon       @relation(fields: [iconId], references: [id])
  parentId    Int?
  parent      Category?  @relation("Parent", fields: [parentId], references: [id])
  childrens   Category[] @relation("Parent")
}
